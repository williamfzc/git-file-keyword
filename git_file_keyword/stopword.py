import pathlib

git_op_words = [
    "git",
    "repository",
    "commit",
    "branch",
    "merge",
    "pull",
    "push",
    "clone",
    "fetch",
    "checkout",
    "rebase",
    "stash",
    "tag",
    "remote",
    "origin",
    "upstream",
    "conflict",
    "ignore",
    "diff",
    "log",
    "status",
    "add",
    "remove",
    "reset",
    "amend",
    "blame",
    "cherry-pick",
    "grep",
    "reflog",
    "submodule",
    "ignore",
    "ignorecase",
    "ignore-space-change",
    "ignore-all-space",
    "ignore-blank-lines",
    "ignore-submodules",
    "ignore-missing",
    "ignore-errors",
    "ignore-paths",
    "ignore-paths-file",
    "ignore-other-worktrees",
    "ignore-skip-worktree-bits",
    "ignore-untracked",
    "ignore-non-option",
    "ignored",
    "ignore-space-at-eol",
    "ignore-space-change",
    "ignore-space-change-at-eol",
    "ignore-whitespace",
    "ignore-blank-lines-at-eof",
]

angular_commit_types = [
    "feat",
    "fix",
    "docs",
    "style",
    "refactor",
    "perf",
    "test",
    "build",
    "ci",
    "chore",
    "revert",
]

meaningless_git = [
    "commit",
    "added",
    "updated",
    "fixed",
    "removed",
    "changed",
    "closed",
    "renamed",
    "refactored",
    "tested",
    "document",
    "docs",
    "test",
    "tests",
    "bug",
    "bugs",
    "issue",
    "issues",
    "feature",
    "features",
    "improvement",
    "improvements",
    "build",
    "builds",
    "release",
    "releases",
    "patch",
    "patches",
    "hotfix",
    "hotfixes",
    "documentation",
    "readme",
    "README",
    "changelog",
    "changelogs",
    "bump",
    "version",
    "versions",
    "major",
    "minor",
    "patch",
    "prerelease",
    "postrelease",
    "class",
    "function",
    "method",
    "variable",
    "parameter",
    "return",
    "if",
    "else",
    "for",
    "while",
    "switch",
    "case",
    "try",
    "catch",
    "finally",
]

opensource_repo = [
    # psf/requests
    "_",
    "requests",
    "python",
    "rst",
    "signed",
    "support",
    "proxy",
    "github",
    "authors",
    "fixes",
    "links",
    "change",
    "urllib3",
    "link",
    "__",
    "setup",
    "doc",
    "response",
    "file",
    "advanced",
    "cleanup",
    "error",
    "pytest",
    "url",
    "httpbin",
    "code",
    "json",
    "update",
    "updates",
    "master",
    "typo",
    "src",
    "data",
    # psf/black
    "type",
    "authored",
    "trailing",
]

# from sklearn (can not handle
warning_tokens = ['ain', 'bits', 'blank', 'cherry', 'daren', 'eof', 'eol', 'errors', 'hadn', 'herse', 'himse', 'itse', 'lines', 'mayn', 'mightn', 'missing', 'mon', 'mustn', 'myse', 'needn', 'option', 'oughtn', 'paths', 'pick', 'shan', 'skip', 'space', 'submodules', 'untracked', 'whitespace', 'worktree', 'worktrees']

with open(pathlib.Path(__file__).parent / "data" / "stopword-iso.txt") as f:
    iso_stopwords = set([s.strip() for s in f.readlines()])


def gen_stopword_set() -> set:
    return iso_stopwords.union(
        git_op_words, angular_commit_types, meaningless_git, opensource_repo, warning_tokens
    )


stopword_set = gen_stopword_set()
